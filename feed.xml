<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dylan Huang</title>
    <description>Web enthusiast, Computer Engineer, Dog Lover</description>
    <link>dylanhuang.com/</link>
    <atom:link href="dylanhuang.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Jul 2018 10:15:47 -0700</pubDate>
    <lastBuildDate>Mon, 16 Jul 2018 10:15:47 -0700</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Solving HQTrivia with machine learning</title>
        <description>&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;During the winter break of 2017, I decided to work on a project that would make
me learning something new. Inspired by this
&lt;a href=&quot;https://mux.com/blog/how-we-used-machine-learning-to-predict-hq-trivia-answers/&quot;&gt;article&lt;/a&gt;,
I decided to make my own trivia solver based on the trending HQTrivia app. In
the following section, I am going to outline the approach that I designed and
implemented.&lt;/p&gt;

&lt;h2 id=&quot;high-level-approach&quot;&gt;High-level approach&lt;/h2&gt;
&lt;p&gt;If you have not played HQTrivia, the idea is to answer a multiple choice trivia
question in under 10 seconds. If you can answer 12 questions in a row, you win a
cash prize!&lt;/p&gt;

&lt;h3 id=&quot;getting-the-data&quot;&gt;getting the data&lt;/h3&gt;
&lt;p&gt;The first thing that I needed to do was to find out how to grab the
HQTrivia data. A lot of people used OCR along with hooking up their phone
to their computer. But I figured there had to be a better way. After some
research, I found someone who had sniffed the packets coming from their phone
while the HQTrivia app was open and found out that HQTrivia serves their
questions through a websocket connection (I had to learn how to use websockets).
After doing the same thing, I was able to discover the schema and HQTrivia‚Äôs
schema for questions. To do the packet sniffing, I used a web debugging proxy
called &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; and proxied my phone‚Äôs network
through my computer.&lt;/p&gt;

&lt;h3 id=&quot;choosing-the-model&quot;&gt;choosing the model&lt;/h3&gt;
&lt;p&gt;The next thing I knew was that I wanted to use some sort of machine learning
model to solve the questions (lol buzz words), but I had no previous experience using a model to
solve anything. The first thing I did was learn about what exactly a ‚Äúmodel‚Äù is,
what models currently exist, and what the hell a feature is.&lt;/p&gt;

&lt;p&gt;After learning about my options for a model, I decided on using a decision tree
with gradient boosting from the
&lt;a href=&quot;https://www.google.com/search?num=20&amp;amp;ei=Iv5LW-OuLpDcswW3nIygAg&amp;amp;btnG=Search&amp;amp;q=light+gbm&quot;&gt;LightGBM&lt;/a&gt;
by Microsoft because it was proven to be better than
&lt;a href=&quot;https://github.com/dmlc/xgboost&quot;&gt;xgboost&lt;/a&gt;, but xgboost has proven to be
extremely effective in machine learning competitions that require quick
learning, classification, or learning on small amounts of data (due to gradient
boosting).&lt;/p&gt;

&lt;h3 id=&quot;creating-the-features&quot;&gt;creating the features&lt;/h3&gt;
&lt;p&gt;The next step was for me to create features. Below is a list of features that I
designed using Google and Bing searches:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Google search each answer and count number of occurrences for each evaluated important word&lt;/li&gt;
  &lt;li&gt;Bing search each answer and count number of occurrences for each evaluated important word&lt;/li&gt;
  &lt;li&gt;Google question and each answer, create document corpus from each answer search, compare cosine similarity of question search to corpus&lt;/li&gt;
  &lt;li&gt;Google search each important word and count number of occurrences for each answer&lt;/li&gt;
  &lt;li&gt;Bing search each important word and count number of occurrences for each answer&lt;/li&gt;
  &lt;li&gt;Google question with each answer appended and count number of search results&lt;/li&gt;
  &lt;li&gt;Google question with each answer appended and count number of search results&lt;/li&gt;
  &lt;li&gt;Google important words with each answer appended and count number of search results&lt;/li&gt;
  &lt;li&gt;Google noun chunks with each answer appended and count number of search results&lt;/li&gt;
  &lt;li&gt;Wikipedia search each answer and count number of occurrences for each evaluated important word&lt;/li&gt;
  &lt;li&gt;Google question with each answer appended in quotes and count occurrences of each answer&lt;/li&gt;
  &lt;li&gt;Bing search question with each answer appended in quotes and count occurrences of each answer&lt;/li&gt;
  &lt;li&gt;Google question with each answer appended in quotes and count occurrences of each important word&lt;/li&gt;
  &lt;li&gt;Google evaluated noun chunks of question and count occurrences of each answer&lt;/li&gt;
  &lt;li&gt;Google the question and count occurrences of each answer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;annoying-thing&quot;&gt;Annoying thing&lt;/h2&gt;
&lt;p&gt;Since google rate limits your searches, I had to use a VPN to change every 3
questions during a game because I was doing upwards of 40 google searches for
each question, depending on the evaluation of the question. Also, since network
requests are relatively slow to CPU computation, I had to implement an immense
amount of multithreading to deal with the massive amount of network I/O that I
was executing for each question.&lt;/p&gt;

&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Gradient Boosting and LightGBM&lt;/li&gt;
  &lt;li&gt;NLP with &lt;a href=&quot;https://spacy.io/&quot;&gt;spaCy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Machine Learning Features&lt;/li&gt;
  &lt;li&gt;Websockets&lt;/li&gt;
  &lt;li&gt;TF-IDF / Cosine Similarity&lt;/li&gt;
  &lt;li&gt;Multithreading network requests&lt;/li&gt;
  &lt;li&gt;Lots of Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After months of testing and gathering data to train my supervised model, I was
able to get about a ~80% accuracy rate (which is not that great if you think
about the chance of getting 12 right in a row .8 ^ 12 = .0687) and at an average
time of ~7 seconds per questions. I gathered a total of 629 questions. And I
also won a game worth $53.19 dollars (note that its not my name because it was 3
of us and we decided to split on the last question to guarantee a win)!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/hqtrivia/win.jpg&quot; alt=&quot;Yay!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All the gathered questions, mode, and source code can be found &lt;a href=&quot;https://github.com/dphuang2/hqtrivia-solver&quot;&gt;here&lt;/a&gt; :)!&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Mar 2018 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2018/03/22/hqtrivia/</link>
        <guid isPermaLink="true">dylanhuang.com/2018/03/22/hqtrivia/</guid>
        
        
      </item>
    
      <item>
        <title>Arm Internship</title>
        <description>&lt;h3 id=&quot;task-1---duration-1-week&quot;&gt;Task 1 - Duration: 1 Week&lt;/h3&gt;
&lt;p&gt;Read documentation on how to run a benchmark, setup Git/Gerrit pre-commit hooks,
and learn the mechanics of Juju (anatomy of a charm).&lt;/p&gt;

&lt;h3 id=&quot;task-2---duration-1-week&quot;&gt;Task 2 - Duration: 1 Week&lt;/h3&gt;
&lt;p&gt;Flash Mellanox NICs with updated firmware and confirm that it can PXE boot. This
required a lot of ipmitool, bash scripts, and reading Mellanox documentation.&lt;/p&gt;

&lt;h3 id=&quot;task-3---duration-8-weeks&quot;&gt;Task 3 - Duration: ~8 Weeks&lt;/h3&gt;
&lt;p&gt;Re-write software infrastructure to be compatible with newer version of Juju.
This meant re-writing almost the entire Python codebase that automates the
recreations of benchmarks on readily deployable machines in a server lab to be
compatible with a newer version of Juju (the team‚Äôs deployment system). In
addition to re-writing for newer software infrastructure, my job was also to
migrate the code to Python 3, document the whole process, design changes to a
team of 25 people.&lt;/p&gt;

&lt;h3 id=&quot;task-4---duration-4-weeks&quot;&gt;Task 4 - Duration: ~4 Weeks&lt;/h3&gt;
&lt;p&gt;Create software to automate flake8/pylint codestyling on Gerrit patch set
updates and provide in-line feedback on the Gerrit front-end.  This was
accomplished through the use of Jenkins and about ~400 lines of Python
automation code. This task required a lot of string parsing (Regex), reading
Gerrit API Docs, and desigining a well-engineered process for auto-linting.&lt;/p&gt;

&lt;h3 id=&quot;task-5---duration-3-weeks&quot;&gt;Task 5 - Duration: ~3 Weeks&lt;/h3&gt;
&lt;p&gt;Designing algorithm to estimate benchmark run times given a yaml
experiment file. Thought of idea to use chi-squared independence test to
decrease estimation time by an average of around 700%&lt;/p&gt;

&lt;h3 id=&quot;important-skills-learnedimproved&quot;&gt;Important skills learned/improved:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Software Development Life cycle - Research/Learning, Development, Code Review Process&lt;/li&gt;
  &lt;li&gt;Strong Coding/Scripting Skills&lt;/li&gt;
  &lt;li&gt;Python, Bash/Shell scripting&lt;/li&gt;
  &lt;li&gt;Continuous Integration with Jenkins&lt;/li&gt;
  &lt;li&gt;Using statistical tests to increase efficiency of calculations&lt;/li&gt;
  &lt;li&gt;Oral Presentation Skills&lt;/li&gt;
  &lt;li&gt;Computer architecture and Workload Analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pictures&quot;&gt;Pictures!&lt;/h2&gt;
&lt;p&gt;Silly pic üòù
&lt;img src=&quot;/assets/image/arm/silly_interns.jpg&quot; alt=&quot;Group picture&quot; title=&quot;Silly pic&quot; /&gt;
Floor 3 squad üë•
&lt;img src=&quot;/assets/image/arm/floor_3_squa.jpg&quot; alt=&quot;Group picture&quot; title=&quot;Floor 3 Squad picture&quot; /&gt;
Climbing ü§ò&lt;/p&gt;
&lt;video autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; controls=&quot;&quot; style=&quot;width: 100%;&quot;&gt;
  &lt;source src=&quot;/assets/image/webp/arm/fly.mov&quot; type=&quot;video/mp4&quot; /&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2017/05/22/arm/</link>
        <guid isPermaLink="true">dylanhuang.com/2017/05/22/arm/</guid>
        
        
      </item>
    
      <item>
        <title>First React App!</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://dylanhuang.com/Tic-tac-toe-React/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dphuang2/Tic-tac-toe-React&quot;&gt;Repo&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 08 May 2017 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2017/05/08/first-react-app/</link>
        <guid isPermaLink="true">dylanhuang.com/2017/05/08/first-react-app/</guid>
        
        
      </item>
    
      <item>
        <title>Resume Database Web App</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;I will always take any opportunity that I can find to make a web app. 
So when I found out that my fraternity did not have a web accessible resume database, I
took the opportunity to make one myself.&lt;/p&gt;

&lt;h2 id=&quot;goalsfunctionalities&quot;&gt;Goals/Functionalities&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Friendly interface&lt;/li&gt;
  &lt;li&gt;Persistent resume files on new deploys&lt;/li&gt;
  &lt;li&gt;Resumes can be downloaded&lt;/li&gt;
  &lt;li&gt;Only users with a code can sign up for an account&lt;/li&gt;
  &lt;li&gt;Accounts
    &lt;ul&gt;
      &lt;li&gt;Roles ie. Brother, Admin, Employer
        &lt;ul&gt;
          &lt;li&gt;Brothers:
            &lt;ul&gt;
              &lt;li&gt;view other resumes that are not private&lt;/li&gt;
              &lt;li&gt;upload own resume&lt;/li&gt;
              &lt;li&gt;make own resume private&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Admin:
            &lt;ul&gt;
              &lt;li&gt;see all resumes&lt;/li&gt;
              &lt;li&gt;delete users&lt;/li&gt;
              &lt;li&gt;change role of users&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Employer:
            &lt;ul&gt;
              &lt;li&gt;see all resumes&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technologies&quot;&gt;Technologies&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails&quot;&gt;rails&lt;/a&gt; - Web Framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thoughtbot/paperclip&quot;&gt;paperclip&lt;/a&gt; - File Attachments&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;devise&lt;/a&gt; - Authentication&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;pundit&lt;/a&gt; - Authorization&lt;/li&gt;
  &lt;li&gt;Amazon S3 - File Storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;accounts&quot;&gt;Accounts&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;To begin, I needed to implement a complete account authentication and
authorization system. To do this, I used a &lt;a href=&quot;https://github.com/RailsApps/rails-devise-pundit&quot;&gt;boilerplate rails app&lt;/a&gt; from github
that implements basic user controller actions, sign up/in flow, and role-based
authorization. I thought it would be a waste of my time to implement a complete
role-based authentication and authorization app when someone has already laid
the foundation of an app with that purpose. Why would I try to invent the wheel
again, right?&lt;/p&gt;

&lt;p&gt;The next step would be to customize this app so that it had the roles that I
wanted as well as the code-based sign up functionality.
ruby&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;role: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:employer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brother&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;after_initialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_default_role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new_record?&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_default_role&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brother&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I wanted to implement the code-based sign up so the first step was to put a
code in the secrets.yml file. For development, I simply just put in a two-letter
easy-to-type code. But for production, I planned on grabbing the secret code
from environment variables.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;brother_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tt&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;brother_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV[&quot;BROTHER_CODE&quot;] %&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After adding the code, the next step was to customize the logic for signing up.
The sign up action for devise is under the ‚Äúcreate‚Äù function in the
registrations‚Äô controller. To override the ‚Äúcreate‚Äù function, I
had to first change some routes.&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Not sure why I need to skip the sessions controller&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# but it fixed duplicate routes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;devise_for&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;skip: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sessions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;devise_for&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;controllers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;registrations: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'my_devise/registrations'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To then override the devise registration controller action for ‚Äúcreate‚Äù, I created a folder
called my_devise which would contain a registration controller that simply
extends the base registration controller and has an additional if-else statement
that checks the brother code in the Rails secret.yml file.&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# controllers/my_devise/registrations_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDevise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegistrationsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Devise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegistrationsController&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# POST /resource&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secrets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;brother_code&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_user_registration_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Incorrect Code&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And lastly, I had to add the brother code text field to the sign up.&lt;/p&gt;
&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--views/devise/registrations/new.html.erb--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--Other form HTML code above--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:code&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'form-control'&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--Other form HTML code below--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And voila! I now had the roles that I wanted and code-based sign up implemented.
And with the addition of pundit and some authorization logic put into
app/policies/UserPolicy.rb, I was able to implement the authorization of certain
pages based on roles.&lt;/p&gt;

&lt;h3 id=&quot;file-attachment&quot;&gt;File Attachment&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;The next hard step was to implement file-attachments for each user. Fortunately,
there is an extremely convenient ruby gem called ‚Äòpaperclip‚Äô that helps you add
a file to an already-existing model. This is easily done with a few lines of
code and one migration.&lt;/p&gt;

&lt;p&gt;First I just had to add the paperclip gem to my Gemfile and then add these two
lines of code to my user model.&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;has_attached_file&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;styles: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;thumbnail: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;40x40#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validates_attachment&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;content_type: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;content_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/pdf&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And with a simple form, users can now just upload a pdf to the website!&lt;/p&gt;
&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_document&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;document?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;document_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Document&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'form-control'&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;surviving-new-deployments&quot;&gt;Surviving New Deployments&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Now it was only until I actually pushed this deployment to production did I
realize that the files that are uploaded through paperclip don‚Äôt survive new
deployments! This was a big issue because if the website had to be updated and
everyone had already uploaded all their resumes, all the file storage would be lost
and everyone would have to re-upload their resume. Thankfully, paperclip has an
easy-to-do solution with their configuration to use Amazon S3 Buckets for file-storage
instead of locally cached files on the web-server itself.&lt;/p&gt;

&lt;p&gt;To do this, all I had to add was this configuration to production.rb file:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/environments/production.rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Amazon S3 Bucket config&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paperclip_defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;storage: :s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;s3_credentials: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;bucket: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'S3_BUCKET_NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;access_key_id: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;secret_access_key: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;s3_region: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AWS_REGION'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;s3_host_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AWS_REGION'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.amazonaws.com&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Now aside from the specific additional routes, controller logic, and html.erb
code, this concludes a fairly complete implementation of a resume database that
can easily be deployed to Heroku!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dphuang2/kappathetatau&quot;&gt;Link to Github Repo&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 21 Mar 2017 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2017/03/21/resume-app/</link>
        <guid isPermaLink="true">dylanhuang.com/2017/03/21/resume-app/</guid>
        
        
      </item>
    
      <item>
        <title>Vim Addict</title>
        <description>&lt;p&gt;Vim has become an essential part of my development workflow. I started using Vim
in the Summer of 2016 while working for a remote internship. Since I had the
opportunity to spend time and learn something new, I decided that Vim was the
next thing that I wanted to learn. It was a great decision that has lead me to
become a more efficient coder. I became addicted to Vim so much that I created a
small little
&lt;a href=&quot;https://github.com/dphuang2/dotfiles/blob/master/setupvim.sh&quot;&gt;script&lt;/a&gt; to set up
my .vimrc and plugins on the engineering workstation at school. This script was
especially helpful when I had to work on ECE 391 in the lab!&lt;/p&gt;

&lt;p&gt;My favorite plugins are (ordered by use):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ctrlpvim/ctrlp.vim&quot;&gt;ctrlpvim/ctrlp.vim&lt;/a&gt; - Fuzzy finder&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot;&gt;scrooloose/nerdtree&lt;/a&gt; - File explorer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-surround&quot;&gt;tpop/vim-surround&lt;/a&gt; - Easy surroundings
in pairs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jiangmiao/auto-pairs&quot;&gt;jiangmiao/auto-pairs&lt;/a&gt; - Auto insert
and delete pairs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/justinmk/vim-sneak&quot;&gt;justinmk/vim-sneak&lt;/a&gt; - Jump to any
location specified by two characters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; Here is also a link to my personal .vimrc that I have refined over the past
10 months:
&lt;a href=&quot;https://github.com/dphuang2/dotfiles/blob/master/vimrc-mac&quot;&gt;dphuang2/dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.norfolkwinters.com/vim-creep/&quot;&gt;Relevant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I have unfortunately become a vim memer over time: &lt;img src=&quot;/assets/image/vimmeme.jpg&quot; alt=&quot;Vim
Meme&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Mar 2017 00:00:00 -0800</pubDate>
        <link>dylanhuang.com/2017/03/08/vim-setup/</link>
        <guid isPermaLink="true">dylanhuang.com/2017/03/08/vim-setup/</guid>
        
        
      </item>
    
      <item>
        <title>Featured in the local news!</title>
        <description>&lt;p&gt;While pledging for Theta Tau a group of 9 students and I are running a
fundraiser for Camp Quality, a charity that helps kids with cancer, by
delivering breakfast food to students the morning after Unofficial!&lt;/p&gt;

&lt;p&gt;On Wednesday, March 1, 2017, we were featured in an online article in the local
news. I was the main point of contact and was quoted throughout the article.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.news-gazette.com/news/local/2017-03-01/top-morning-march-1-2017.html&quot;&gt;Article Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update 3/6/2017 (Monday after fundraiser): Looks like the local senator approved
of our fundraiser!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/webp/unofficial-senator.jpg&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 -0800</pubDate>
        <link>dylanhuang.com/2017/03/01/featured-in-news-gazette-2017/</link>
        <guid isPermaLink="true">dylanhuang.com/2017/03/01/featured-in-news-gazette-2017/</guid>
        
        
      </item>
    
      <item>
        <title>UIUC Fall Semester 2016 Overview</title>
        <description>&lt;h2 id=&quot;classes-taken-ranked-by-difficulty&quot;&gt;Classes taken (Ranked by difficulty):&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt; ECE 391 - Systems Programming  - 40 Hours per week&lt;/li&gt;
  &lt;li&gt; CS 225 - Data Structures - 10 Hours per week&lt;/li&gt;
  &lt;li&gt; CS 173 - Discrete Structures - 6 Hours per week&lt;/li&gt;
  &lt;li&gt; PHYS 213 - Thermodynamics - 5 Hours per week &lt;/li&gt;
  &lt;li&gt; PHYS 214 - Quantum Physics - 5 Hours per week &lt;/li&gt;
  &lt;li&gt; MACS 100 - Intro to Popular TV &amp;amp; Movies - 1 Hour per week &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ece-391&quot;&gt;ECE 391&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;ECE 391 was by far the hardest part of my semester.  It consumed at least 40
hours per week but the content was by far the most advanced and interesting
stuff I have ever learned about in my life.  After having taken the class, I
feel that I understand the core concepts and implementations of an operating
system and why operating systems even exist in the first place.  Knowledge of
bit manipulation, memory management, byte-addressable memory and low level C
programming are essential prerequisite skills to understanding the material for
this class.&lt;/p&gt;

&lt;h4 id=&quot;what-did-i-learn&quot;&gt;What did I learn?&lt;/h4&gt;

&lt;p&gt;I learned the implementation and logic for a general design of an operating
system all the way from assembly level ioctl functions, synchronization with
semaphore and spin locks, memory management through paging, to thread handling
through PIT (Programmable Interface Timer) implemented scheduling.  The first
few weeks of the class were spent learning the x86 Intel syntax and
understanding the registers that are protocol for x86 based systems such as the
stack registers EBP and ESP.&lt;/p&gt;

&lt;h4 id=&quot;mp1--missile-command&quot;&gt;MP1 ‚Äî Missile Command&lt;/h4&gt;

&lt;p&gt;With this newfound knowledge of Intel x86 assembly language, the first MP was to
code Missile Command using a linked-list implementation for missiles and an RTC
tasklet to control the speed of the game. This MP1 demonstrated the use of
assembly linkage, rtc user program use, and jump tables.&lt;/p&gt;

&lt;h4 id=&quot;mp2---ece-391-journey-game&quot;&gt;MP2 - ECE 391 Journey Game&lt;/h4&gt;

&lt;p&gt;The second MP focused on VGA memory, Mode X display, VGA Color Palette through
Octree, and a device driver for the Tux Controller.&lt;/p&gt;

&lt;h3 id=&quot;mp3---build-your-own-os&quot;&gt;MP3 - Build your own OS&lt;/h3&gt;

&lt;p&gt;This MP lasted 8 weeks and was done with a group of four people. There were 5
checkpoints for the whole MP as follows.&lt;/p&gt;

&lt;ol&gt; &lt;li&gt;&lt;b&gt;Checkpoint 1&lt;/b&gt; - Paging and Setting up the GDT/IDT&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Checkpoint 2&lt;/b&gt; - Terminal Driver and File System using EXT2 format&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Checkpoint 3&lt;/b&gt; - Execute and Halt system calls for user-level
programs&lt;/li&gt; &lt;li&gt;&lt;b&gt;Checkpoint 4&lt;/b&gt; - Implement the rest of the system calls
from read, open, write, vidmap, getargs, etc.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Checkpoint 5&lt;/b&gt; -
Multi-terminal and Scheduling using a Round-robin algorithm&lt;/li&gt; &lt;/ol&gt;

&lt;h3 id=&quot;cs-225&quot;&gt;CS 225&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;CS 225 was miles behind ECE 391 in terms of difficulty and number of hours spent
on the class, but nonetheless is still an essential class in understanding the
study of Computer Science.  In this class I learned about how basic data
structures such as Stacks, Queues, Linked Lists, etc. are implemented and the
design choices that are made to keep the complexity of operations on these
functions at a minimum.  I also learned about Trees and its many forms, Graph
implementations and graph algorithms (Kruskal, Dijkstra, Prims).&lt;/p&gt;

&lt;h3 id=&quot;cs-173&quot;&gt;CS 173&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Number and graph theory, algorithm complexities, trees, sets and collection of
sets. Overall the class was about a 7/10 in difficulty, mainly because I was in
a lecture section that was far more difficult than the other lecture section.
(UIUC CS Department needs to get their curriculum straight for this class as the
disparity between lecture sections is so massive that they are almost different
classes)&lt;/p&gt;

&lt;h3 id=&quot;phys-213&quot;&gt;PHYS 213&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Boltzmann distribution, Counting and Simple Harmonic Oscillators, Black-body
radiation, monoatomic and diatomic energy relations, Heat Engines,
Refrigerators, Heatpumps, Adiabatic/Isobaric/Isotermal Processes, and Chemical
potentials.&lt;/p&gt;

&lt;h3 id=&quot;phys-214&quot;&gt;PHYS 214&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;One man: Schrodinger&lt;/p&gt;

&lt;h3 id=&quot;macs-100&quot;&gt;MACS 100&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;TV, TV, TV, Corporate, TV, Movie, TV, Cultural Ideology, etc.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 00:00:00 -0800</pubDate>
        <link>dylanhuang.com/2016/12/20/uiuc-fall-2016/</link>
        <guid isPermaLink="true">dylanhuang.com/2016/12/20/uiuc-fall-2016/</guid>
        
        
      </item>
    
      <item>
        <title>My viral web app, pogobag.me</title>
        <description>&lt;p&gt;pogobag.me is a web application that I personally built with Ruby on Rails. It
interfaces with an unofficial Pokemon Go API to extract data, analyze pokemon
attributes, and display them on a responsive and easy to access website. In the
first two weeks of my first deployment, this website went viral hitting 210,000+
unique users and 3,304,043 Page views in two weeks. As of December 1, 2016 it
yields 173 Stars, 71 Issues, and 30 Pull Requests.&lt;/p&gt;

&lt;p&gt;The project is open-sourced and the Github repo can be found
&lt;a href=&quot;https://github.com/dphuang2/PoGoBag&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 27 Jul 2016 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2016/07/27/pogobag/</link>
        <guid isPermaLink="true">dylanhuang.com/2016/07/27/pogobag/</guid>
        
        
      </item>
    
      <item>
        <title>Google Summer of Code Internship</title>
        <description>&lt;p&gt;‚Ä¢ Worked on data integration to allow quick and scalable calculations of data for the Data Platform and Dashboard Widgets&lt;/p&gt;

&lt;p&gt;‚Ä¢ Ruby on Rails, JavaSript, and Data integration platform experience&lt;/p&gt;

&lt;p&gt;Documentation for all of my work during the summer can be found &lt;a href=&quot;http://dylanhuang.com/streamsets_scripts/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 May 2016 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2016/05/20/berkman/</link>
        <guid isPermaLink="true">dylanhuang.com/2016/05/20/berkman/</guid>
        
        
      </item>
    
      <item>
        <title>CodePath iOS Bootcamp</title>
        <description>&lt;h1 id=&quot;codepath-ios-bootcamp&quot;&gt;CodePath iOS Bootcamp&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://codepath.com/&quot;&gt;CodePath&lt;/a&gt; is a 8-week long iOS bootcamp that is remotely administered.
Concepts learned are outlined &lt;a href=&quot;http://guides.codepath.com/ios#fundamentals&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;final-project---personal-project&quot;&gt;Final Project - Personal Project&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iOSDreamTeam/PostBoard&quot; target=&quot;_blank&quot;&gt;PostBoard&lt;/a&gt; is an app that allows users to post events happening at/near a university campus. Users can spread awareness of events that are coming up - no matter how big or how small the event may be. Have nothing to do on a Friday night? Pull up the app and check out what‚Äôs happening tonight near you!
&lt;img src=&quot;http://i.imgur.com/Yy65paN.gif&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-6---photoshare&quot;&gt;Project 6 - Photoshare&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iOSDreamTeam/PostBoard&quot; target=&quot;_blank&quot;&gt;Photoshare&lt;/a&gt; is a photo sharing app using Parse as its backend.
&lt;img src=&quot;http://i.imgur.com/MpbPbYa.gif&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-4--5---twitter-clone&quot;&gt;Project 4 &amp;amp; 5 - Twitter Clone&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iOSDreamTeam/PostBoard&quot; target=&quot;_blank&quot;&gt;Twitter Clone&lt;/a&gt; is a basic twitter app to read and compose tweets the &lt;a href=&quot;https://apps.twitter.com/&quot;&gt;Twitter API&lt;/a&gt;.
&lt;img src=&quot;http://i.imgur.com/cNMeFOD.gif&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-3---yelp-clone&quot;&gt;Project 3 - Yelp Clone&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iOSDreamTeam/PostBoard&quot; target=&quot;_blank&quot;&gt;Yelp Clone&lt;/a&gt; is a Yelp search app using the &lt;a href=&quot;http://www.yelp.com/developers/documentation/v2/search_api&quot;&gt;Yelp API&lt;/a&gt;.
&lt;img src=&quot;http://i.imgur.com/LcTWVmP.gif&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-1--2---fandago-clone&quot;&gt;Project 1 &amp;amp; 2 - Fandago Clone&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iOSDreamTeam/PostBoard&quot; target=&quot;_blank&quot;&gt;Fandago Clone&lt;/a&gt; is a movies app using the &lt;a href=&quot;http://docs.themoviedb.apiary.io/#&quot;&gt;The Movie Database API&lt;/a&gt;.
&lt;img src=&quot;http://i.imgur.com/blbrnLg.gif&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;application---tipping-calculator&quot;&gt;Application - Tipping Calculator&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dphuang2/Tipper-iOS&quot; target=&quot;_blank&quot;&gt;Tipper&lt;/a&gt; is a tip calculator application for iOS.
&lt;img src=&quot;http://i.imgur.com/YMsRMdG.gif&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:00:00 -0700</pubDate>
        <link>dylanhuang.com/2016/05/10/codepath/</link>
        <guid isPermaLink="true">dylanhuang.com/2016/05/10/codepath/</guid>
        
        
      </item>
    
  </channel>
</rss>
